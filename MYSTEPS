1) Renaming
2) git add remote
git remote add origin https://github.com/nebezpeka/user-service.git

3) Initialization
used instruction docs\installing-and-running.md -> Comfortable development (PostgreSQL + TypeORM)
cp env-example-relational .env
npm install
после инсталяции зависимостей сразу закомитить не получилось, ибо столкнулись с распространенной проблемой, когда husky блокирует коммит из-за ошибок, обнаруженных линтерами
добавил скрипт "lintFix": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix", который помог мне закоммитить ченжы
проблема была в warning: in the working copy of 'test/utils/constants.ts', LF will be replaced by CRLF the next time Git touches it
Проблема с концами строк (LF vs CRLF) возникла после того, как вы применили линтер (вероятно, ESLint с --fix), и вы работаете на Windows. Это типичная ситуация, и вот почему она происходит:

Как линтер мог вызвать проблему с концами строк?

Автоматическое форматирование: Линтеры с флагом --fix не только исправляют ошибки, но и могут форматировать ваш код, включая концы строк.
Стандартные настройки ESLint: ESLint и другие линтеры могут иметь стандартные настройки, которые предполагают использование LF в качестве конца строки (как в Unix-like системах).
Windows и CRLF: Windows по умолчанию использует CRLF в качестве конца строки, и если ESLint автоматически изменил концы строк на LF, то Git теперь видит разницу и выдает вам предупреждение.

вторая проблема с коммитами это то, что нужно делать по определенному стандарту, нельзя назвать коммит как угодно...
скорее всего сработал commitlint и husky
нужно указать сначала тип коммита, потом область и потом тему коммита:
вот правильный подход
git commit -m "chore(deps): update npm dependencies after npm install"
chore - остальные изменения
deps - область коммита это зависимости
update npm dependencies after npm install - тема коммита

Вот несколько типов коммитов, которые часто используют:
feat - новая фича (функциональность)
fix - исправление бага
docs - изменения в документации
style - стилистические изменения (например, форматирование)
refactor - рефакторинг кода (без изменения функциональности)
test - изменения в тестах
chore - остальные изменения (например, обновление зависимостей)

можно также скипать с помощью флага --no-verify (временно):